# Common Configuration
quarkus.http.port=8080
quarkus.http.root-path=/
quarkus.http.cors=true
# CORS Configuration
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with,x-forward-for,content-length,host,origin,referer,Access-Control-Request-Method,Access-Control-Request-Headers
quarkus.http.cors.exposed-headers=Content-Disposition,Content-Type
quarkus.http.cors.access-control-max-age=24H
quarkus.http.cors.access-control-allow-credentials=true

#Ignore DMN validations when building for now
kogito.decisions.validation=IGNORE
# For development mode only
%dev.quarkus.http.cors.origins=*
# API Documentation
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=true
quarkus.smallrye-graphql.ui.always-include=true
quarkus.smallrye-graphql.ui.path=/graphql-ui

# Development Mode Configuration
%dev.quarkus.devservices.enabled=true
%dev.quarkus.kogito.devservices.enabled=true
%dev.quarkus.datasource.devservices.enabled=true
%dev.quarkus.datasource.devservices.port=5432
%dev.quarkus.datasource.db-kind=postgresql

# Development URLs
%dev.kogito.service.url=http://localhost:${quarkus.http.port}
%dev.kogito.jobs-service.url=http://localhost:${quarkus.http.port}
%dev.kogito.dataindex.http.url=http://localhost:${quarkus.http.port}
%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT
%dev.jbpm.devui.users.mscott.groups=admin,HR,IT

# Production Configuration
%prod.quarkus.devservices.enabled=false
%prod.quarkus.kogito.devservices.enabled=false
%prod.kogito.service.url=${KOGITO_SERVICE_URL}
%prod.kogito.jobs-service.url=${KOGITO_JOBS_SERVICE_URL}
%prod.kogito.dataindex.http.url=${KOGITO_DATAINDEX_HTTP_URL}

# Production Database Configuration
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=${POSTGRESQL_USER:kogito}
%prod.quarkus.datasource.password=${POSTGRESQL_PASSWORD:kogito123}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${POSTGRESQL_SERVICE:localhost}:5432/${POSTGRESQL_DATABASE:kogito}

# Database Migration (only in production)
%prod.quarkus.flyway.migrate-at-start=true
%prod.quarkus.flyway.baseline-on-migrate=true
%prod.quarkus.flyway.baseline-version=0.0
%prod.quarkus.flyway.locations=classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql
%prod.quarkus.flyway.table=FLYWAY_RUNTIME_SERVICE

# OIDC Configuration
%prod.quarkus.oidc.auth-server-url=${KOGITO_AUTH_SERVER_URL:https://keycloak-${quarkus.kubernetes-client.namespace}.apps.rm2.thpm.p1.openshiftapps.com/auth/realms/jbpm-openshift}
%prod.quarkus.oidc.client-id=${KOGITO_CLIENT_ID:kogito-app}
%prod.quarkus.oidc.credentials.secret=${KOGITO_CLIENT_SECRET:secret}
%prod.quarkus.oidc.tls.verification=none
%prod.quarkus.oidc.token.issuer=any

# Development OIDC mock (for dev mode only)
%dev.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
%dev.quarkus.oidc.client-id=kogito-app
%dev.quarkus.oidc.credentials.secret=secret
%dev.quarkus.oidc.tls.verification=none
%dev.quarkus.oidc.token.issuer=any

# Kogito Specific Configurations (production only)
%prod.kogito.apps.persistence.type=jdbc
%prod.kogito.data-index.blocking=true
%prod.kogito.data-index.domain-indexing=true

# Hibernate Configuration
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=false

# OpenShift Configuration (production only)
%prod.quarkus.kubernetes-client.trust-certs=true
%prod.quarkus.kubernetes.deployment-target=openshift
%prod.quarkus.openshift.build-strategy=docker
%prod.quarkus.openshift.route.expose=true
%prod.quarkus.openshift.deployment-kind=Deployment

# Container Image Configuration (production only)
%prod.quarkus.container-image.build=true
%prod.quarkus.container-image.group=${user.name}-dev
%prod.quarkus.container-image.name=cc-application-approval
%prod.quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000



# Commented out Kafka configuration for future reference
# kafka.bootstrap.servers=localhost:9092
# kogito.events.usertasks.enabled=true
# kogito.events.variables.enabled=true
# kogito.events.processinstances.enabled=true
# mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
# mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
# mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
# mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
# mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
# mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
# mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
